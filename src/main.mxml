<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="*" xmlns:bridge="bridge.*"
				backgroundColor="#ffffff" backgroundGradientAlphas="[1.0, 1.0]"
				backgroundGradientColors="[#EBE8D7,#EBE8D7]" creationComplete="ini(),loadZoom()" 
				creationPolicy="all" horizontalGap="0" layout="vertical" paddingBottom="5"
				paddingLeft="0" paddingRight="0" paddingTop="0" preloader="preload.CustomPreloader"
				verticalGap="0">
	<mx:Style source="css/estilo.css"/>
	<mx:Script>
		<![CDATA[
			import action_alert.HAlert;
			import action_alert.HMensagens;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
				
			include 'actionScripts/zoom.as';
	        include 'actionScripts/print.as';
	        include 'actionScripts/save.as';
	        include 'actionScripts/load.as';
	        include 'actionScripts/setTrees.as';
	        include 'actionScripts/undoRedoSave.as';
	        include 'actionScripts/objectDragDrop.as';
	        include 'actionScripts/setObjects.as';
	        include 'actionScripts/results.as';
	        include 'actionScripts/MouseDown.as';
	        include 'actionScripts/TreesClick.as';
	        include 'actionScripts/clear.as';
	        include 'actionScripts/views.as';
	        include 'actionScripts/setVisualization.as';
			include 'actionScripts/exportMininet.as';
			include 'actionScripts/exportController.as';	
			include 'actionScripts/exportNS3.as';	
			include 'actionScripts/URL.as';
		
			//public var popup:objects_popup = new objects_popup();
			public var cont_click:int=0;
			public var exportControllforcombo:Boolean=false;
			public var isInport:Boolean=false;
			public var countNumber3:int=1;
			public var posX:Array = [];
			public var posY:Array = [];
						
			public var chave:String;
			public var countNumber1:int=1;
			public var arrayContIfacesCheck:Array=[];
			public var exportNSDL:Boolean=true;
			public var undostepsArray:ArrayCollection;		    
			public var saveBool:Boolean=false;
		    [Embed(source="assets/pencil.png")]
           	public static const loaderCursor:Class;
            public var firsTime:Boolean=true;
            public var save:UserPrefs;
            public var deleteObj:Object;
            public var undoRedoDescriptor:int=-1;
			public var bool:Boolean;
			public var line:Link;
			public var obj:Object;
			public var popUplogin:deletemessage;
			public var fileReferenceList:FileReferenceList;
			public var fileRef:FileReference;
			public var userObjfileReferenceList:FileReferenceList;
			public var userObjfileRef:FileReference;
			private var urlRequest:URLRequest;
			private var serverSideScript:String = "uploadxml.php";
			public var xmlInfo:XMLList;
			public var popup_ob:objects_popup = new objects_popup();	
			
			[Bindable] public var getInterfaces:Array=new Array;
			[Bindable] public var contSwitch:int=670;
			[Bindable] public var contController:int=0;
			[Bindable] public var getValueListenPort:Array;
			[Bindable] public var getValueRouterSSID:Array;
			[Bindable] public var getValueStationSSID:Array;
			[Bindable] public var getValueMacAddress:Array;
			[Bindable] public var getValueSwitchMacAddress:Array;
			[Bindable] public var getValueIPAddress:Array;
			[Bindable] public var getValueSignalRange:Array;
			[Bindable] public var contNumberOfInterfaces:int=0;			
			[Bindable] public var temaplateArrcol:ArrayCollection;		    
			[Bindable] private var saveXml:XML;
			[Bindable] public static var numberOfNodes:Number=0;            
			[Bindable] public var focusobject:Object=null;			
			[Bindable] public var focustreeobject:Object=null;	    
			[Bindable] private var type:Boolean;		    
			[Bindable] private var viewType:Boolean;		    
			[Bindable] private var DelviewType:String;	    
			[Bindable] public var Parent:String;		    
			[Bindable] public var child:String;	
		    [Bindable] public var names:Array=[]; 
			[Bindable] public var allnames:Array=[]; 
		    [Bindable] public var linksNames:Array=[]; 		    
			[Bindable] public var rootXml:XML=<root name="nsdl"/>; 		    
			[Bindable] public var objectsXml:XML=<objects name="objects"/>; 		    
			[Bindable] public var networkXml:XML=<network name="network"></network>; 	    
			[Bindable] public var scenariosXml:XML=<scenarios name="scenarios"></scenarios>; 		    
			[Bindable] public var visualizationXml:XML=<visualization name="visualizations"></visualization>; 		    
			[Bindable] public var userobjectsXml:XML=<objects name="objects"></objects>; 		    
			[Bindable] public var viewsXml:XML=<views name="views"></views>;
			[Bindable] public var objectsArrayCollection:ArrayCollection=new ArrayCollection();		    
			[Bindable] public var linksArrayCollection:ArrayCollection=new ArrayCollection();
			[Bindable] private var xmlurl:String;            
			[Bindable] private var userObjxmlurl : String;            
			[Bindable] private var downloadingxmlurl : String;		    
			[Bindable] private var xml:XML=<nsdl></nsdl>;  
			[Bindable] private var sh:String;
			[Bindable] private var sh1:String;
			[Bindable] private var sh2:String;
			[Bindable] public var netxml:XML = <network></network>;            
			[Bindable] public var openflowxml:XML = <openflow></openflow>;
			[Bindable] public var objxml:XML = <objects></objects>;      		
			[Bindable] public var viwxml:XML = <views></views>;  
			[Bindable] private var viewsObjects : ArrayCollection=new ArrayCollection();		    
			[Bindable] private var ViewBool : Boolean;            
			[Bindable] private var ViewNumber : Number=0;            
			[Bindable] public var viewfirstTime:Boolean=true;            
			[Bindable] public var viewsarray:ArrayCollection=new ArrayCollection(); 
			
			public var xe:int = 0;
			public var intnew:int=0;
			public var controll:int=0;	
			public var flowName:String;
			public var macSwitch:String;
			public var listenPortSwitch:String;
			public var openFlowVersion:String;
			public var routerSSID:String;
			public var channel:String;
			public var mode:String;
			public var switch_:String;
			public var getSwitch_:String;
			public var getopenflowversion_:String;
			public var getmode_:String;
			public var getchannel_:String;
			public var mac_Switch:String;			
			public var macSource:String="";
			public var macDestination:String="";
			public var vlanPriority:String="";
			public var setOutput:String="";
			public var setEnqueue:String="";
			public var setStripVlan:String="";
			public var setVLANPriority:String="";
			public var setSourcePort:String="";
			public var setDestinationPort:String="";
			public var setIPSource:String="";
			public var setIPDestination:String="";
			public var setMACSource:String="";
			public var setMACDestination:String="";
			public var setTOS:String="";
			public var ipSource:String="";
			public var ipDestination:String="";
			public var ingressPort:String="";
			public var sourcePort:String="";
			public var destinationPort:String="";
			public var outPort:String="";
			public var priority:String="";
			public var vlanID:String="";
			public var setVlanID:String="";
			public var ethtype:String="";
			public var protocol:String="";
			public var tos:String="";
		    
			public function ini():void {
			   	this.addEventListener(KeyboardEvent.KEY_DOWN,keyPressed);
			   	networkXml.appendChild(userobjectsXml);
			    networkXml.appendChild(viewsXml);
			    rootXml.appendChild(networkXml);
			    rootXml.appendChild(scenariosXml);
			    scenariosXml.appendChild(visualizationXml);
			    undostepsArray = new ArrayCollection();
	            temaplateArrcol = new ArrayCollection();
	            urlRequest = new URLRequest(serverSideScript);
				fileReferenceList = new FileReferenceList();
				fileReferenceList.addEventListener(Event.SELECT, fileSelectedHandler);
				userObjfileReferenceList = new FileReferenceList();
				userObjfileReferenceList.addEventListener(Event.SELECT, userObjfileSelectedHandler);
			    xml.ignoreWhitespace = true;
	           	xml.prettyPrinting = false;
				fileRefScript_mininet = new FileReference();
				myData.send();
			}
			public  function setObjectXml(ob:Object,xmlLi:XMLList):void {	
				exportNSDL=true;
				var ob:Object=ob;
				if(ob.className=='Link'){
					ob=ob.can;
				}
				for(var i:int=0;i<(ob.objparaArrayCol.length);i++){
					var obj:objParameter=ob.objparaArrayCol[i] as objParameter;
					var valueObjArr:ArrayCollection=ob.valueObjArr;	
					if(obj.id=='string'){
						var j:int;
						if((obj.name=="id" || obj.name=="name") ||( obj.name=="source" || obj.name=="destination") ){
						}
						else if(controll==1 && (obj.name=="controllerPort" || obj.name=="controllerIPAddress" ) ){}
						else{ var checked:Boolean=false;
							for(j=0;j<valueObjArr.length;j++){
								if(obj.name==valueObjArr[j].id){
									var xmlList:XMLList = XMLList("<"+obj.name+">"+valueObjArr[j].name+"</"+obj.name+">");
									checked=true;
									break;
								}
							} 
							if(checked==false)
								xmlList = XMLList("<"+obj.name+"></"+obj.name+">");
							xmlLi.appendChild(xmlList);							
						}
					}
					else if(obj.id=='array'){
						checked=false;						
						for(j=0;j<intnew;j++){
							if (j==xe){
								if(obj.name=="flowName"){
									xmlList = XMLList("<"+obj.name+">"+obj.flowName[j]+"</"+obj.name+">");
									checked=true;
									break;
								}								
								else if(obj.name=="priority"){
									xmlList = XMLList("<"+obj.name+">"+obj.priority[j]+"</"+obj.name+">");
									checked=true;
									break;
								}								
								else if(obj.name=="ingressPort"){
									xmlList = XMLList("<"+obj.name+">"+obj.ingressPort[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="vlanPriority"){
									xmlList = XMLList("<"+obj.name+">"+obj.priority[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="tos"){
									xmlList = XMLList("<"+obj.name+">"+obj.TOS[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="ethtype"){
									xmlList = XMLList("<"+obj.name+">"+obj.ethType[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="sourcePort"){
									xmlList = XMLList("<"+obj.name+">"+obj.srcPort[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="destinationPort"){
									xmlList = XMLList("<"+obj.name+">"+obj.dstPort[j]+"</"+obj.name+">");
									checked=true;
									break;
								}	
								else if(obj.name=="computerMACAddress"){
									xmlList = XMLList("<"+obj.name+">"+obj.MacAddress+"</"+obj.name+">");
									xmlLi.appendChild(xmlList);
								}
								else if(obj.name=="setSourcePort"){
									xmlList = XMLList("<"+obj.name+">"+obj.setSourcePort[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="setDestinationPort"){
									xmlList = XMLList("<"+obj.name+">"+obj.setDestinationPort[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="setVlanPriority"){
									xmlList = XMLList("<"+obj.name+">"+obj.setVLANPriority[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="setOutput"){
									xmlList = XMLList("<"+obj.name+">"+obj.setOutput[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="setEnqueue"){
									xmlList = XMLList("<"+obj.name+">"+obj.setEnqueue[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
								else if(obj.name=="notes"){
									xmlList = XMLList("<"+obj.name+">"+obj.notes[j]+"</"+obj.name+">");
									checked=true;
									break;
								}
							}
						}						
						if(checked==false){
							xmlList = XMLList("<"+obj.name+"></"+obj.name+">");
						}				
						
						if(controll==0){}else
						xmlLi.appendChild(xmlList);
					}
					
					else if(obj.id=='boolean'){
						checked=false;
						for(j=0;j<valueObjArr.length;j++){
							if(obj.name==valueObjArr[j].id){
								
								var str:String;
								if(valueObjArr[j].name=='0')
									str='true';else str='false';
								xmlList = XMLList("<"+obj.name+">"+str+"</"+obj.name+">");
								checked=true;
								break;								
							}
						} 
						if(checked==false)	
							xmlList = XMLList("<"+obj.name+">true</"+obj.name+">");
						
						else if(controll==0 && (obj.name=="setStripVlan")){}
						else{
							xmlLi.appendChild(xmlList);
						}
					}
					else if(obj.id=='options'){
						checked=false;
						if(ob.id=="Computer"){
							if(obj.name=="mask"){
								xmlList = XMLList("<"+obj.name+">"+obj.MaskAddress+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}								
						}
						else if(ob.id=="Station"){
							if(obj.name=="mask"){
								xmlList = XMLList("<"+obj.name+">"+obj.MaskAddress+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}								
						}
						else if(ob.id=="Switch"){
							if(obj.name=="switch"){
								xmlList = XMLList("<"+obj.name+">"+obj.switchType+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}	
							else if(obj.name=="ofp_version"){
								xmlList = XMLList("<"+obj.name+">"+obj.openFlowVersion+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}
						}
						else if(ob.id=="Access Point"){
							if(obj.name=="mode"){
								xmlList = XMLList("<"+obj.name+">"+obj.mode+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}
							else if(obj.name=="switch"){
								xmlList = XMLList("<"+obj.name+">"+obj.switchType+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}
							else if(obj.name=="channel"){
								xmlList = XMLList("<"+obj.name+">"+obj.channel+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}
							else if(obj.name=="ofp_version"){
								xmlList = XMLList("<"+obj.name+">"+obj.openFlowVersion+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}
						}
						else if(ob.id=="utp" || ob.id=="fiber"){
							if(obj.name=="htb"){
								xmlList = XMLList("<"+obj.name+">"+obj.HTB+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}		
							else if(obj.name=="bandwidth"){
								xmlList = XMLList("<"+obj.name+">"+obj.rate+"</"+obj.name+">");
								xmlLi.appendChild(xmlList);
							}		
						}
						else if(ob.id=="Controller"){
							if(intnew==0){
								if(obj.name=="remoteLocal"){
									checked=true;
									xmlList = XMLList("<"+obj.name+">"+obj.isRemote+"</"+obj.name+">");
									xmlLi.appendChild(xmlList);
								}
								else if(obj.name=="openflowController"){
									checked=true;
									xmlList = XMLList("<"+obj.name+">"+obj.openflowController+"</"+obj.name+">");
									xmlLi.appendChild(xmlList);
								}
							}
							else{							
								for(var k:int=0;k<intnew;k++){									
									if (k==xe){
										for(j=0;j<valueObjArr.length;j++){
											if(obj.name==valueObjArr[j].id){	
												if(obj.name=="macSource"){
													xmlList = XMLList("<"+obj.name+">"+obj.macSource[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="setStripVlan"){
													xmlList = XMLList("<"+obj.name+">"+obj.setStripVlan[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="macDestination"){
													xmlList = XMLList("<"+obj.name+">"+obj.macDestination[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="macSwitch"){
													xmlList = XMLList("<"+obj.name+">"+obj.mac_Switch[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="ipSource"){
													xmlList = XMLList("<"+obj.name+">"+obj.ipSource[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="ipDestination"){
													xmlList = XMLList("<"+obj.name+">"+obj.ipDestination[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="vlanID"){
													xmlList = XMLList("<"+obj.name+">"+obj.vlanID[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="setVlanID"){
													xmlList = XMLList("<"+obj.name+">"+obj.setVlanID[k]+"</"+obj.name+">");
													checked=true;
													break;
												}		
												else if(obj.name=="setIPSource"){
													xmlList = XMLList("<"+obj.name+">"+obj.setIPSource[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="setIPDestination"){
													xmlList = XMLList("<"+obj.name+">"+obj.setIPDestination[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="setMACSource"){
													xmlList = XMLList("<"+obj.name+">"+obj.setMACSource[k]+"</"+obj.name+">");
													checked=true;
													break;
												}
												else if(obj.name=="setMACDestination"){
													xmlList = XMLList("<"+obj.name+">"+obj.setMACDestination[k]+"</"+obj.name+">");
													checked=true;
													break;
												}		
												
												else{
													if(controll==1){												
													}
													else{
														xmlList = XMLList("<"+obj.name+">"+obj.option[valueObjArr[j].name]+"</"+obj.name+">");
														checked=true;
														break;
													}
												}
											}
										}
									if(checked==false)	
										xmlList = XMLList("<"+obj.name+"></"+obj.name+">");
									if(controll==1 && (obj.name=="remoteLocal" || obj.name=="openflowController")){}
									else if(controll==0 && (obj.name=="setVlanID"||obj.name=="vlanID"||obj.name=="macSource"||obj.name=="macDestination"||obj.name=="ipSource"||obj.name=="ipDestination"
										||obj.name=="macSwitch"||obj.name=="setIPSource"||obj.name=="setIPDestination"||obj.name=="setMACSource"||obj.name=="setMACDestination"||obj.name=="setStripVlan")){}
									else{
										if(obj.name=="remoteLocal"&&k>=1){											
										}
										else if(obj.name=="openflowController"&&k>=1){											
										}
										else
											xmlLi.appendChild(xmlList);
									}
								}
							}
						}
					}
					}
				} 
				
				if(ob.className=='objects'){
				}
			}
			
			public function setViewsForExport(viewsXml:XML):XML {         	
				var viewsXml:XML=viewsXml;  
				var arr:ArrayCollection=viewsarray;
				for(var count:int=0;count<arr.length;count++){
					var tempArr:viewObjects=arr[count];
					var xx:XMLList=XMLList("<set id='"+tempArr.name+"'/>");
					var temp:XMLList=XMLList("<listobjects></listobjects>");
					for(var i:int=0;i<tempArr.objects.length;i++){
						var tempArray:Object=tempArr.objects[i];
						var tempA:XMLList=XMLList("<objectid>"+tempArray.name+"</objectid>");
						temp.appendChild(tempA);
					}
					xx.appendChild(temp);     
					viewsXml.appendChild(xx);
				}
				return viewsXml;
			}			
			
			public function exportFile():void {
				xml = <nsdl></nsdl>;
				netxml = <network></network>;
				openflowxml = <openflow></openflow>;
				objxml = <objects></objects>;
				viwxml = <views></views>;
				scenariosXml=<scenarios ></scenarios>; 
				var xmlInfo:XMLList=objects as XMLList;
				
				for(var p:int=0;p<dropCanvas.numChildren;p++){					
					var UIob:Object = dropCanvas.getChildAt(p);
					var xmlLi:XMLList;
					if(UIob.className =='objects'){
						var ob:objects=UIob as objects;						
						var ab:int;
						if(ob.id=="Computer"){
							xmlLi = XMLList('<'+ob.id+' id="'+ob.nid+'"/>');
							setObjectXml(ob,xmlLi);
						}
						else if(ob.id=="Switch"){
							xmlLi = XMLList('<'+ob.id+' id="'+ob.nid+'"/>');
							setObjectXml(ob,xmlLi);
						}
						else if(ob.id=="Access Point"){
							xmlLi = XMLList('<'+ob.id+' id="'+ob.nid+'"/>');
							setObjectXml(ob,xmlLi);
						}
						else if(ob.id=="Controller"){							
							var obb:Object=ob;
							for(var i:int=0;i<(obb.objparaArrayCol.length);i++){
								var obj:objParameter=obb.objparaArrayCol[i] as objParameter;
								var canew:String = String(obj.flowName);
								if(canew!="")
									intnew = int(obj.flowName.length);
							}	
							if(intnew==0){
								xmlLi = XMLList('<'+ob.id+' id="'+ob.name+'"/>');
								setObjectXml(ob,xmlLi);
								objxml.appendChild(xmlLi);
							}
							else{
							for(var a:int=0;a<intnew;a++){	
								if(a==0){
									controll=0;
									xmlLi = XMLList('<'+ob.id+' id="'+ob.name+'"/>');
									setObjectXml(ob,xmlLi);
									objxml.appendChild(xmlLi);
									}
									controll=1;									
									xmlLi = XMLList('<'+"flowTable"+(xe+1)+' id="'+ob.name+'"/>');
									setObjectXml(ob,xmlLi);
									openflowxml.appendChild(xmlLi);
									xe++;							
							}
							xe=0;
							}
						}							
						else{								
							xmlLi = XMLList('<'+ob.id+' id="'+ob.name+'"/>');
							setObjectXml(ob,xmlLi);
						}								
										
						if(ob.id=="openflowScenario" || ob.id=="flowTable")
							openflowxml.appendChild(xmlLi);
							
							else if (ob.id=="Controller"){
							}
							
							else
								objxml.appendChild(xmlLi);
					}
						
					else if(UIob.className=='Link'){
						var obLink:Link=UIob as Link;
								
						var xmlLi2:XMLList = XMLList('<link id="'+obLink.name+'" />');
						setObjectXml(obLink,xmlLi2);
						var xmlLi3:XMLList = XMLList('<connection source="'+obLink.can.source.name+'" destination="'+obLink.can.destination.name+'"/>');
						xmlLi2.appendChild(xmlLi3);
						objxml.appendChild(xmlLi2);
					} 
				}
				netxml.appendChild(objxml);
				netxml.appendChild(setViewsForExport(viwxml));
				scenariosXml.appendChild(setVisualizationsForExport(visualizationXml));
				scenariosXml.appendChild(openflowxml);
				xml.appendChild(netxml);
				xml.appendChild(scenariosXml);
				createxml.send();
				if(exportNSDL==true){
				fileRef = new FileReference();
				fileRef.addEventListener(Event.COMPLETE, SaveToLocalMachineResult);
				fileRef.addEventListener(ProgressEvent.PROGRESS, downloading_progress);
				var request:URLRequest = new URLRequest('output.xml');
				fileRef.download(request);  
				}
			}
			
			public function d123(ob:Object,bool:Boolean):void {
				var linestartArray:ArrayCollection=ob.linesStartingArray;
				for(var i:int=0;i<linestartArray.length;){
					var line:Link=linestartArray[i] as Link;
					var testname:String=line.name;
					var testarray:Array=dropCanvas.getChildren();
					var isExist:Boolean=false;
					for(var count:int=0;count<testarray.length;count++){
						var Istaemplate:Boolean=false;
						if(testname==testarray[count].name){
							isExist=true;
							if(testarray[count].can.isMOtherTemplate) Istaemplate=true;
							break;
						}
					}
					if(isExist){
						deleteItem(testarray[count]);
					}
					else{
						linestartArray.removeItemAt(i);
					}
				}
				var lineendArray:ArrayCollection=ob.linesEndingArray;
				for(var ii:int=0;ii<lineendArray.length;){
					line=lineendArray[ii] as Link;
					testname=line.name;
					testarray=dropCanvas.getChildren();
					isExist=false;
					for(var countp:int=0;countp<testarray.length;countp++){
						Istaemplate=false;
						if(testname==testarray[countp].name){
							isExist=true;
							if(testarray[countp].can.isMOtherTemplate) Istaemplate=true;
							break;
						}
					}
					if(isExist){
						deleteItem(testarray[countp]); 
					}
					else{ 
						lineendArray.removeItemAt(ii);
					}
				}
				
				undoRedoDescriptor=-1;
				undostepsArray.removeAll();
				undostepsArray.refresh();
				firsTime=true;
				dropCanvas.removeChild(ob as DisplayObject);
				ob=null;
				focusobject=null;
				setNetworkTree();
			}
			
			public function tagChanged():void {
				focustreeobject = null;
			}

			private function keyPressed(evt:KeyboardEvent):void{
				if(evt.type=='keyUp'){
					ViewBool=false;
					this.removeEventListener(KeyboardEvent.KEY_UP,keyPressed);
					this.addEventListener(KeyboardEvent.KEY_DOWN,keyPressed);
				}
				
				if(evt.ctrlKey && evt.type=='keyDown'){
					ViewBool=true;
					this.removeEventListener(KeyboardEvent.KEY_DOWN,keyPressed);
					this.addEventListener(KeyboardEvent.KEY_UP,keyPressed);
				}
			}			
			private function fileSelectedHandler(event:Event):void{
				var fileReference:FileReference;
				var fileReferenceList:FileReferenceList = FileReferenceList(event.target);
				var fileList:Array = fileReferenceList.fileList;				
				// get the first file that the user chose
				fileReference = FileReference(fileList[0]);								
				xmlurl=fileReference.name; 
				// upload the file to the server side script
				fileReference.addEventListener(Event.COMPLETE, upload2);
				fileReference.addEventListener(ProgressEvent.PROGRESS, uploading_progress);
				fileReference.upload(urlRequest);
			}			
			private function userObjfileSelectedHandler(event:Event):void{
				var fileReference:FileReference;
				var fileReferenceList:FileReferenceList = FileReferenceList(event.target);
				var fileList:Array = fileReferenceList.fileList;
				fileReference = FileReference(fileList[0]);
				userObjxmlurl=fileReference.name; 
				fileReference.addEventListener(Event.COMPLETE, userObjupload2);
				fileReference.addEventListener(ProgressEvent.PROGRESS, uploading_progress);
				fileReference.upload(urlRequest);
			}			

			private function SaveToServerResult(ev:ResultEvent):void{
				downloadingxmlurl=ev.result.a.aa.toString();
				downButton.visible=true;
			}			
			private function SaveToLocalMachineResultScript(eve:Event):void{
				downButton.visible=false;
				progressBar2.visible=false;
				progressBar2.includeInLayout=false;
			}			
			private function SaveToLocalMachineResult(eve:Event):void{
				deletedownloadedxml.send();
				downButton.visible=false;
				progressBar2.visible=false;
				progressBar2.includeInLayout=false;
			}

			private function resizeHandler(eve:Event):void {
				var objs:Array=eve.target.getChildren()
				for(var i:int=0;i<objs.length;i++){					
					if(!objs[i].hasOwnProperty('lineLength')  ){
						objs[i].ini2();
					}
				}
			}			
			private function listnerremoverHandler():void {
				var objs:Array=dropCanvas.getChildren();
				for(var i:int=0;i<objs.length;i++){
					if(!objs[i].hasOwnProperty('lineLength') ){
						objs[i].listnerremoverHandler();
					}
				}
			}			
			private function linksComboClick(str:String):void {
				preview.setImage(str);  
			}		
						
			public function delSource(source:String,line:String):void {
				for(var kk:int=0;kk<objects(dropCanvas.getChildByName(source)).linesStartingArray.length;kk++){
					if(objects(dropCanvas.getChildByName(source)).linesStartingArray[kk].name==line){
						objects(dropCanvas.getChildByName(source)).linesStartingArray.removeItemAt(kk);
					}
				}
			}
			
			public function delDestination(dest:String,link:String):void {
				for(var jj:int=0;jj<objects(dropCanvas.getChildByName(dest)).linesEndingArray.length;jj++){
					if(objects(dropCanvas.getChildByName(dest)).linesEndingArray[jj].name==link)
						objects(dropCanvas.getChildByName(dest)).linesEndingArray.removeItemAt(jj);
				}
			}
			//END LINKS---------------------------------------------------------------------------------
			//START POPUPS------------------------------------------------------------------------------
			public function showPopup(fun:Function,ob:Object):void {
           		popUplogin= new deletemessage();
	            popUplogin.func=fun;
	            popUplogin.ob=ob;
	            popUplogin.str="Deleting '"+ob.name+"' . Are you sure? This is cannot be undone.";
	            PopUpManager.addPopUp(popUplogin,this,false);
			}
 
			public function showPopupForNew():void {
				var popUpTEmp:popUpForNew= new popUpForNew();
			    popUpTEmp.func2=clear;
			    popUpTEmp.func1=saveFile;
			    popUpTEmp.str="Creating a New Design.";
			    PopUpManager.addPopUp(popUpTEmp,this,false);
			}
			
			public function pupupAbout():void {
				var popupABOUT:about = new about();
				PopUpManager.addPopUp(popupABOUT,this,false);
			}
			
			public function downloadScript():void {
				var downloadSCRIPT:downloadScr = new downloadScr();
				PopUpManager.addPopUp(downloadSCRIPT,this,false);
			}
			
			
			//END POPUPS------------------------------------------------------------------------------
			//START UPLOAD----------------------------------------------------------------------------
			public function upload():void{     
				arrayContIfacesCheck = new Array;
				var imagesFilter:FileFilter = new FileFilter("xml","*.xml");
				fileReferenceList.browse([imagesFilter]);
			}
			
			public function userobjupload():void{     
				var imagesFilter:FileFilter = new FileFilter("xml","*.xml");
				userObjfileReferenceList.browse([imagesFilter]);}
			
			private function upload2(event:Event):void {
				getlocalXmlservice.send();
			}
			
			private function userObjupload2(event:Event):void {
				userObjgetlocalXmlservice.send();
			}
			
			private function uploading_progress(event:Event):void {
				progressBar.visible=true;
				progressBar.includeInLayout=true;
			}
			
			public function uploadeFileDlete():void{
				deletexml.send();
			}
			
			public function userObjuploadeFileDlete():void{
				userObjdeletexml.send();
			}			

			private function downLoad():void {          
				fileRef = new FileReference();				
				fileRef.addEventListener(Event.COMPLETE, SaveToLocalMachineResult);
				fileRef.addEventListener(ProgressEvent.PROGRESS, downloading_progress);
				downloadingxmlurl = "./scripts/" + downloadingxmlurl;
				var request:URLRequest = new URLRequest(downloadingxmlurl);
				fileRef.download(request);
			}
								
			private function downloading_progress(event:Event):void {
				progressBar2.visible=true;
				progressBar2.includeInLayout=true;
			}

			public function deleteItem(ob:Object):void {
				if(ob!=null){
					if(ob.className=='Link'){
						var source:objects=dropCanvas.getChildByName(ob.can.source.name) as objects;
						delSource(source.name,Link(ob).name);
						var dell:int;
						if(source.name.slice(0,6)=="Switch"||source.name.slice(0,12)=="Access Point"){
							if(source.name.slice(0,6)=="Switch"){
								dell = int(source.name.slice(7,9));
								getInterfaces.splice(String("s"+dell+"-eth"+(Link(ob).can.sourcePort)));
							}
							else{
								dell = int(source.name.slice(13,15));
								getInterfaces.splice(String("s"+dell+"-eth"+(Link(ob).can.sourcePort)));
							}
						}
						var dest:objects=dropCanvas.getChildByName(ob.can.destination.name) as objects;
						delDestination(dest.name,Link(ob).name);							
						if(dest.name.slice(0,6)=="Switch"||dest.name.slice(0,13)=="Access Point"){
							if(source.name.slice(0,6)=="Switch"){
								dell = int(dest.name.slice(7,9));
								getInterfaces.splice(String("s"+dell+"-eth"+(Link(ob).can.destinationPort)));
							}
							else{
								dell = int(dest.name.slice(13,15));
								getInterfaces.splice(String("s"+dell+"-eth"+(Link(ob).can.destinationPort)));
							}
						}														
						dropCanvas.removeChild(ob as DisplayObject);
						undoRedoDescriptor=-1;
						undostepsArray.removeAll();
						undostepsArray.refresh();
						firsTime=true;
						focusobject=null;
						setNetworkTree();
					}
						
					else if(ob.className=='objects'){
						d123(ob,true);						
					}
				}
				else HAlert.informacao(HMensagens.SelectObject);
			}
			//END ITEM-----------------------------------------------------------------------------------
			private function invoqPopup() : void {
				PopUpManager.addPopUp(popup_ob, this, true );
				PopUpManager.centerPopUp(popup_ob);
			}
			
       ]]>
	</mx:Script>
	
	<mx:HTTPService id="deletedownloadedxml"
         method="post"
         url="./scripts/deletedownloadedxml.php">
    <mx:request>
        <filename>{this.downloadingxmlurl}</filename>
    </mx:request>
    </mx:HTTPService>
    <mx:HTTPService id="deletexml"
         method="post"
         url="delete.php">
    <mx:request>
        <filename>{this.xmlurl}</filename>
    </mx:request>
    </mx:HTTPService>
    <mx:HTTPService id="userObjdeletexml"
         method="post"
         url="userObjdelete.php">
    <mx:request>
        <filename>{this.userObjxmlurl}</filename>
    </mx:request>
    </mx:HTTPService>
    <mx:HTTPService id="createxml" 
         method="POST"    useProxy="false"
         url="exportXml.php">
   <mx:request>
      <loss>{this.xml}</loss>
   </mx:request>
    </mx:HTTPService>
	
	<mx:HTTPService id="createscript_ns3" 
					method="POST"    
					url="./scripts/createscript_ns3.php">	
	</mx:HTTPService>
	
	<mx:HTTPService id="createscript_mininet" 
					method="POST"    
					url="./scripts/createscript_mininet.php">	
	</mx:HTTPService>
	
	<mx:HTTPService id="createscript_controller" 
					method="POST"    
					url="./scripts/createscript_controller.php">
	</mx:HTTPService>

    <mx:HTTPService id="localXmlservice"
         method="post" result="SaveToServerResult(event)"  
         url="./scripts/localXml.php" >
    <mx:request>
        <localXml>{this.saveXml}</localXml>
    </mx:request>
    </mx:HTTPService>
	
    <mx:HTTPService id="getlocalXmlservice" resultFormat="e4x" 
         method="post" result="load(event)"
         url="{xmlurl}" />
    <mx:HTTPService id="userObjgetlocalXmlservice" 
         method="post" result="userObjresult(event)"
         url="{userObjxmlurl}" />
    	
	<mx:HTTPService id="myData" url="inputXml.xml?nocache={Math.random()}"  result="result(event)" fault="Alert.show('there is an error in input xml ')" />
	<mx:HBox width="100%" paddingRight="0" backgroundColor="#009ACD">
		<local:menu borderColor="#009ACD" width="100%" height="20" ob="{this}"/>
	</mx:HBox>
	<mx:HBox width="100%" backgroundColor="#B1CCF7" horizontalGap="0" paddingTop="0" height="40" >
	    <mx:Button click="showPopupForNew()" height="40" toolTip="New" icon="@Embed(source='assets/1new.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0"  buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
	    <mx:Button click="upload()" height="40" toolTip="Open" icon="@Embed(source='assets/1open_48.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0" buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]" />
	    <mx:Button click="saveFile()" height="40" toolTip="Save" icon="@Embed(source='assets/1save_48.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0" buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]" />
	    <mx:Button click="doPrint()" height="40" toolTip="Print" icon="@Embed(source='assets/1Print.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0" buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
        <mx:Button click="undo(event)" height="40" toolTip="Undo" icon="@Embed(source='assets/1Undo.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0"  buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
        <mx:Button click="redo()" height="40" toolTip="Redo"  icon="@Embed(source='assets/1Redo.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0" buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
        <mx:Button click="applyZoom(dozooom())" height="40" toolTip="Zoom in"  icon="@Embed(source='assets/1ZoomIn.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0"  buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
        <mx:Button click="applyZoom(dozooomOut())" height="40" toolTip="Zoom out" icon="@Embed(source='assets/1ZoomOut.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0"  buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
        <mx:Button click="if(focusobject!=null){showPopup(deleteItem,focusobject)}else HAlert.informacao(HMensagens.SelectObject);" height="40" toolTip="Delete"  icon="@Embed(source='assets/delete.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0"  buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
		<mx:Button click="opennew()" height="40" toolTip="New" icon="@Embed(source='assets/new.png')" fillAlphas="[0.0, 0.0, 0.0, 0.0]" alpha="1.0" cornerRadius="0"  buttonMode="true" borderColor="#B1CCF7" fillColors="[#B1CCF7, #B1CCF7]"/>
		<mx:Button label="Download" click="downLoad()" height="40"  id="downButton" visible="false"  fillAlphas="[1.0, 1.0]" fillColors="[#F08888, #F08888]"/>
		<mx:ProgressBar id="progressBar" height="40" includeInLayout="false" indeterminate="true" visible="false" label=" Uploading..."/>
		<mx:ProgressBar id="progressBar2" height="40" indeterminate="true" includeInLayout="false" visible="false" label=" Downloading..."/>
	</mx:HBox>
			
	<mx:HBox width="100%" height="100%" paddingTop="3" horizontalGap="3" paddingLeft="3" paddingRight="3">
				
		<mx:VBox height="100%" width="250" >
		<mx:TabNavigator width="250" height="70%" backgroundColor="#F0F0E9" themeColor="#F5E13A" change="tagChanged()">
			<mx:VBox label="Library" width="100%" height="100%">
			<mx:Tree dataProvider="{objectsXml}" labelField="@name" width="100%" 
				 	 height="100%" dragEnabled="true" id="objectsTree" 
					 change="tree_itemClick(event);"/>
            <mx:VBox width="100%" >
            <mx:ComboBox id="linkCombo" visible="false" includeInLayout="false" dataProvider="{linksNames}" change="linksComboClick(linkCombo.value.toString())"  />
			</mx:VBox>
			</mx:VBox>			
			<mx:VBox label="Network" width="100%" height="100%" id="networktab" >
			<mx:Tree dataProvider="{rootXml}" labelField="@name" width="100%" showRoot="false"
				  	 height="100%" dragEnabled="true" id="networkTree"  doubleClickEnabled="true"
 					 doubleClick="network_itemClick2(event)" itemClick="network_itemClick(event)" 
					 change="network_itemClick(event)"/>
			<mx:HBox horizontalGap="1">
			</mx:HBox>
		 	</mx:VBox>
		</mx:TabNavigator>
			<local:Preview id="preview"/>
		</mx:VBox>			
		
		<mx:TabNavigator height="100%" width="100%" backgroundColor="#F0F0E9" >
			<mx:Canvas label="Network" width="100%" height="100%">			
			<mx:Canvas width="2000" height="1000" horizontalScrollPolicy="off" 
					   doubleClickEnabled="true" doubleClick="invoqPopup()"
					   dragEnter="dragEnterHandler(event);" id="dropCanvas"
       				   dragOver="dragOverHandler(event);" resize="resizeHandler(event)"
        			   dragDrop="dragDropHandler(event);" backgroundColor="#FFFFFF" borderStyle="solid">
			</mx:Canvas>
			</mx:Canvas>
		</mx:TabNavigator>
	</mx:HBox>	
	<mx:HBox width="100%" horizontalAlign="center" paddingRight="0" backgroundColor="#F0F0E9">
		<mx:Label fontSize="12" fontWeight="bold" text="Visual Network Descriptor - (SDWN version)  Last Update: 2018/10/02" textAlign="center"/>
	</mx:HBox>
	
	<bridge:FABridge/>	
</mx:Application>
